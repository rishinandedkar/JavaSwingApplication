/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.CustomerRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.RetailerEnterprise;
import Business.Network.Network;
import Business.Order.MasterOrder;
import Business.Order.Order;
import Business.Order.OrderItem;
import Business.Organization.AmazonRequestHandlingOrganization;
import Business.Organization.CustomerFacingOrganization;
import Business.Organization.Organization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.AmazonOrderWorkRequest;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Rishi Nandedkar
 */
public class ShoppingCartJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ShoppingCartJPanel
     */
    JPanel userProcessContainer;
    UserAccount account;
    EcoSystem business;
    CustomerFacingOrganization customerFacingOrganization;
    Enterprise enterprise;
    MasterOrder masterOrder;
    private Order order;
    public ShoppingCartJPanel(JPanel userProcessContainer, UserAccount account, CustomerFacingOrganization customerFacingOrganization, Enterprise enterprise, EcoSystem business) {
        initComponents();
    this.account = account;
    this.customerFacingOrganization= customerFacingOrganization;
    this.enterprise= enterprise;
    this.userProcessContainer= userProcessContainer;
    //this.order = order;
    order = new Order();
    this.business = business;
    
    populateUpperTable();
    }

   
   
    
    public void populateUpperTable(){
    
      DefaultTableModel table = (DefaultTableModel) productTable.getModel();
        String[] columNames = {"Category","ProductId", "Product Name", "Price","Quantity"};
        
       
        
        String[][] data = {
            {"Electronics","1", "TV", "300","12"},
            {"Electronics","2", "Fridge", "250","30"},
            {"Electronics","3", "Playstation 4", "300","50"},
            {"Electronics","4", "iPhone X", "900","200"},
            {"Electronics","5", "Google Pixel 2", "950","200"},
            {"Furniture","100", "Sofa", "300","12"},
            {"Furniture","200", "Chair", "250","30"},
            {"Furniture","300", "Dining Table", "300","50"},
            {"Furniture","400", "Study Table", "900","200"},
            {"Furniture","500", "Cupboard", "950","200"},
            {"Clothes","1000", "Jeans", "300","12"},
            {"Clothes","2000", "Snow Jacket", "250","30"},
            {"Clothes","3000", "Scarf", "300","50"},
            {"Clothes","4000", "T-Shirt", "900","200"},
            {"Clothes","5000", "Trousers", "950","200"}
        
        };
        table.setDataVector(data, columNames);
        
    
        
       
       
        
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        shoppingCart = new javax.swing.JTable();
        backBtn = new javax.swing.JButton();
        addtoCartButton6 = new javax.swing.JButton();
        quantitySpinner = new javax.swing.JSpinner();
        jLabel5 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();
        btnRemoveOrderItem = new javax.swing.JButton();
        btnCheckOut = new javax.swing.JButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(174, 221, 221));

        shoppingCart.setFont(new java.awt.Font("American Typewriter", 1, 18)); // NOI18N
        shoppingCart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Category", "Product ID", "Product  Name", "Price", "Quantity", "Total Cost"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(shoppingCart);
        if (shoppingCart.getColumnModel().getColumnCount() > 0) {
            shoppingCart.getColumnModel().getColumn(0).setResizable(false);
            shoppingCart.getColumnModel().getColumn(1).setResizable(false);
            shoppingCart.getColumnModel().getColumn(2).setResizable(false);
            shoppingCart.getColumnModel().getColumn(3).setResizable(false);
            shoppingCart.getColumnModel().getColumn(4).setResizable(false);
            shoppingCart.getColumnModel().getColumn(5).setResizable(false);
        }

        backBtn.setFont(new java.awt.Font("American Typewriter", 1, 13)); // NOI18N
        backBtn.setText("<< Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        addtoCartButton6.setFont(new java.awt.Font("American Typewriter", 1, 13)); // NOI18N
        addtoCartButton6.setText("+ ADD TO CART");
        addtoCartButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addtoCartButton6ActionPerformed(evt);
            }
        });

        quantitySpinner.setFont(new java.awt.Font("American Typewriter", 1, 13)); // NOI18N
        quantitySpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        jLabel5.setFont(new java.awt.Font("American Typewriter", 1, 13)); // NOI18N
        jLabel5.setText("Quantity:");

        jLabel7.setFont(new java.awt.Font("American Typewriter", 1, 18)); // NOI18N
        jLabel7.setText("Products in cart");

        productTable.setFont(new java.awt.Font("American Typewriter", 1, 18)); // NOI18N
        productTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Category", "Product ID", "Product  Name", "Price", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(productTable);
        if (productTable.getColumnModel().getColumnCount() > 0) {
            productTable.getColumnModel().getColumn(0).setResizable(false);
            productTable.getColumnModel().getColumn(1).setResizable(false);
            productTable.getColumnModel().getColumn(2).setResizable(false);
            productTable.getColumnModel().getColumn(3).setResizable(false);
            productTable.getColumnModel().getColumn(4).setResizable(false);
        }

        btnRemoveOrderItem.setFont(new java.awt.Font("American Typewriter", 1, 13)); // NOI18N
        btnRemoveOrderItem.setText("Remove");
        btnRemoveOrderItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveOrderItemActionPerformed(evt);
            }
        });

        btnCheckOut.setFont(new java.awt.Font("American Typewriter", 1, 13)); // NOI18N
        btnCheckOut.setText("Checkout>>");
        btnCheckOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckOutActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setFont(new java.awt.Font("American Typewriter", 1, 13)); // NOI18N
        jRadioButton1.setText("Fenway");

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setFont(new java.awt.Font("American Typewriter", 1, 13)); // NOI18N
        jRadioButton2.setText("Back Bay");

        jLabel2.setFont(new java.awt.Font("American Typewriter", 1, 13)); // NOI18N
        jLabel2.setText("Choose Area of Delivery:");

        jLabel3.setFont(new java.awt.Font("American Typewriter", 1, 24)); // NOI18N
        jLabel3.setText("Shopping Cart");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(168, 168, 168)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(quantitySpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(100, 100, 100)
                        .addComponent(addtoCartButton6)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(87, 87, 87)
                        .addComponent(jLabel2)
                        .addGap(52, 52, 52)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jRadioButton2)
                                .addGap(49, 438, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jRadioButton1)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 939, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel7)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 939, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(34, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(442, 442, 442)
                        .addComponent(btnRemoveOrderItem))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(319, 319, 319)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(85, 85, 85)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(quantitySpinner)
                    .addComponent(addtoCartButton6))
                .addGap(101, 101, 101)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnRemoveOrderItem)
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jRadioButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jRadioButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backBtn)
                    .addComponent(btnCheckOut, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(36, 36, 36))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
       

    }//GEN-LAST:event_backBtnActionPerformed

    private void addtoCartButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addtoCartButton6ActionPerformed
        // TODO add your handling code here:
        
         int selectedRow = productTable.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }


        String p = productTable.getValueAt(selectedRow, 2).toString();
        int price = Integer.parseInt(productTable.getValueAt(selectedRow, 3).toString());
        int id = Integer.parseInt(productTable.getValueAt(selectedRow, 1).toString());
        String category = productTable.getValueAt(selectedRow, 0).toString();
        int fetchQuantity = Integer.parseInt(quantitySpinner.getValue().toString());
        
        if (fetchQuantity <= 0) {
            JOptionPane.showMessageDialog(null, "Quantity cannot be less than or equal to zero", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        try {

            boolean alreadyPresent = false;
            
            for (OrderItem oi : order.getOrderItemList()) {
                
                if(oi.getProductName()!=null && oi.getProductName().equalsIgnoreCase(p)){
                   int oldQuanitiy= oi.getQuantity();
                   int newQuantity=oldQuanitiy+fetchQuantity;
                   oi.setQuantity(newQuantity);
                    alreadyPresent = true;
                    refreshOrderTable();
                    break;
                }
               // if (oi.getMarketoffer().getProduct() == mo.getProduct()) {
                    //int oldAvail = mo.getProduct().getAvailability();
                   // int newAvail = oldAvail - fetchQuantity;
                   // mo.getProduct().setAvailability(newAvail);
                    //oi.setQuantity(fetchQuantity + oi.getQuantity());
                   // oi.setCustomer(c);
                    //oi.setSellingPrice(salesPrice);
                    //System.out.println(oi.getSellingPrice());
                  
                
            }

            if (!alreadyPresent) {
                //int oldAvail = mo.getProduct().getAvailability();
                //int newAvail = oldAvail - fetchQuantity;
                //mo.getProduct().setAvailability(newAvail);
               // order.addOrderItem(mo, fetchQuantity, salesPrice, c);
               OrderItem o= order.addOrderItem(fetchQuantity,price, account);
                o.setProductName(p);
                o.setCategory(category);
                o.setProductID(id);
                refreshOrderTable();
            }

        } catch (Exception e) {
           e.printStackTrace();
            //return;
        }

        quantitySpinner.setValue(0);


      
    }//GEN-LAST:event_addtoCartButton6ActionPerformed

    public void refreshOrderTable() {
        DefaultTableModel dtm = (DefaultTableModel) shoppingCart.getModel();
        dtm.setRowCount(0);

        for (OrderItem oi : order.getOrderItemList()) {

            Object row[] = new Object[6];
            row[0] = oi;//.getMarketoffer().getProduct();
            row[1] = oi.getProductID();
            row[2] = oi.getProductName();
            row[3] = oi.getPrice();
            row[4] = oi.getQuantity();
            row[5] = oi.getPrice()*oi.getQuantity();
            dtm.addRow(row);

        }
    }
    
    
    private void btnRemoveOrderItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveOrderItemActionPerformed
int row = shoppingCart.getSelectedRow();
        if (row < 0) {
            JOptionPane.showMessageDialog(null, "Please select a row!!", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            OrderItem oi = (OrderItem) shoppingCart.getValueAt(row, 0);
            int oldQuantity = oi.getQuantity();
            order.removeOrderItem(oi);
            JOptionPane.showMessageDialog(null, "Order item removed from the cart");
            refreshOrderTable();
        }        
    }//GEN-LAST:event_btnRemoveOrderItemActionPerformed

    private void btnCheckOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckOutActionPerformed
        // TODO add your handling code here:
        String area="";
        if(jRadioButton1.isSelected()){
          area = "Fenway";
         }
        
        if(jRadioButton2.isSelected()){
           area = "Back Bay";
        }
        
        String message = "Request placed by customer";
        
          if (order.getOrderItemList().size() > 0) {
              order.setArea(area);
            order.setMessage(message);
            Order o1=business.getMasterOrder().addOrder(order);
            
            
              AmazonOrderWorkRequest request = new AmazonOrderWorkRequest();
               request.setOrder(order);
             
              
               Organization org = null;
        
        
        
        for (Network ntw : business.getNetworkList()){
        for (Enterprise e : ntw.getEnterpriseDirectory().getEnterpriseList())
                {
                 
                {
                    for(Organization o : e.getOrganizationDirectory().getOrganizationList())
                    {
                        if(o instanceof AmazonRequestHandlingOrganization){
                          org = o;
                          break;
                    }
                    }
                }
            }
        }
        if (org!=null){
            org.getWorkQueue().getWorkRequestList().add(request);
            account.getWorkQueue().getWorkRequestList().add(request);
        }
              
              
              
            //System.out.println(order);
            JOptionPane.showMessageDialog(null, "Order placed successfully");
            
            order = new Order();
            refreshOrderTable();
            
            //System.out.println(moc);
        } else {
            JOptionPane.showMessageDialog(null, "No order placed");
        }
        
       
    
    }//GEN-LAST:event_btnCheckOutActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addtoCartButton6;
    private javax.swing.JButton backBtn;
    private javax.swing.JButton btnCheckOut;
    private javax.swing.JButton btnRemoveOrderItem;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable productTable;
    private javax.swing.JSpinner quantitySpinner;
    private javax.swing.JTable shoppingCart;
    // End of variables declaration//GEN-END:variables
}
