/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.BestBuyRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Order.Order;
import Business.Order.OrderItem;
import Business.Organization.AmazonRequestHandlingOrganization;
import Business.Organization.BestBuyOrganization;
import Business.Organization.IkeaOrganization;
import Business.Organization.Organization;
import Business.Organization.TargetOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.AmazonOrderWorkRequest;
import Business.WorkQueue.BestBuyOrderWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Rishi Nandedkar
 */
public class BestBuyWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form BestBuyWorkAreaJPanel
     */
    JPanel userProcessContainer;
    UserAccount account;
    BestBuyOrganization bestBuyOrganization;
    EcoSystem business;
    Enterprise enterprise;
    public BestBuyWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, BestBuyOrganization bestBuyOrganization,Enterprise enterprise, EcoSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.bestBuyOrganization = bestBuyOrganization;
        this.business = business;
        this.enterprise = enterprise;
//        bestBuyOrganization.getWorkQueue().getWorkRequestList().clear();
        populateWorkQueueTable();
       
    }

 
   

    


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        requestTestJButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        bestBuyRequestAreaConfirmationTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        amazonRequestButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(174, 221, 221));

        requestTestJButton.setFont(new java.awt.Font("American Typewriter", 1, 13)); // NOI18N
        requestTestJButton.setText("Request Products");
        requestTestJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestTestJButtonActionPerformed(evt);
            }
        });

        bestBuyRequestAreaConfirmationTable.setFont(new java.awt.Font("American Typewriter", 1, 13)); // NOI18N
        bestBuyRequestAreaConfirmationTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product ID", "Product Name", "Quantity", "Price", "Address", "Message", "Order"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(bestBuyRequestAreaConfirmationTable);
        if (bestBuyRequestAreaConfirmationTable.getColumnModel().getColumnCount() > 0) {
            bestBuyRequestAreaConfirmationTable.getColumnModel().getColumn(0).setResizable(false);
            bestBuyRequestAreaConfirmationTable.getColumnModel().getColumn(1).setResizable(false);
            bestBuyRequestAreaConfirmationTable.getColumnModel().getColumn(2).setResizable(false);
            bestBuyRequestAreaConfirmationTable.getColumnModel().getColumn(3).setResizable(false);
            bestBuyRequestAreaConfirmationTable.getColumnModel().getColumn(4).setResizable(false);
            bestBuyRequestAreaConfirmationTable.getColumnModel().getColumn(5).setResizable(false);
            bestBuyRequestAreaConfirmationTable.getColumnModel().getColumn(6).setResizable(false);
        }

        jLabel1.setFont(new java.awt.Font("American Typewriter", 1, 24)); // NOI18N
        jLabel1.setText("BestBuy  Work Area");

        amazonRequestButton.setFont(new java.awt.Font("American Typewriter", 1, 13)); // NOI18N
        amazonRequestButton.setText("Send to Amazon");
        amazonRequestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                amazonRequestButtonActionPerformed(evt);
            }
        });

        jLabel2.setIcon(new javax.swing.ImageIcon("/Users/nidhisarode/Downloads/unnamed.png")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(jLabel2)
                        .addGap(108, 108, 108)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 889, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(297, 297, 297)
                        .addComponent(requestTestJButton)
                        .addGap(80, 80, 80)
                        .addComponent(amazonRequestButton, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(66, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(jLabel1)
                        .addGap(100, 100, 100))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel2)
                        .addGap(73, 73, 73)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(98, 98, 98)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(requestTestJButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(amazonRequestButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(330, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

     public void populateWorkQueueTable(){
         DefaultTableModel model = (DefaultTableModel) bestBuyRequestAreaConfirmationTable.getModel();
        
        model.setRowCount(0);
        
        
        
        for (WorkRequest work : bestBuyOrganization.getWorkQueue().getWorkRequestList()){
            if(work instanceof BestBuyOrderWorkRequest){ 
           // for(Order o1 : work.getOrder()){
                    for(OrderItem oi : work.getOrder().getOrderItemList()){
                   if(oi.getCategory().equals("Electronics")){
                 Object[] row = new Object[7];
                
                 row[0] = oi.getProductID();
                 row[1] = oi.getProductName();
                 row[2] = oi.getQuantity();
                 row[3] = oi.getPrice() * oi.getQuantity();
                
                 row[4] = work.getOrder().getArea();
                 
               row [5] = work.getOrder().getMessage();
               row [6] =work;
            model.addRow(row);
                }
           }
        }
    }
     }
     
     
//     public void populateIncomingRequestTable(){
//         DefaultTableModel model = (DefaultTableModel) bestBuyRequestAreaConfirmationTable.getModel();
//        
//        model.setRowCount(0);
//        
//        
//        
//        for (WorkRequest work : bestBuyOrganization.getWorkQueue().getWorkRequestList()){
//            if(work instanceof BestBuyOrderWorkRequest){ 
//           // for(Order o1 : work.getOrder()){
//                    for(OrderItem oi : work.getOrder().getOrderItemList()){
//                   if(oi.getCategory().equals("Electronics")){
//                 Object[] row = new Object[6];
//                
//                 row[0] = oi.getProductID();
//                 row[1] = oi.getProductName();
//                 row[2] = oi.getQuantity();
//                 row[3] = oi.getPrice() * oi.getQuantity();
//                
//                 row[4] = work.getOrder().getArea();
//                 
//               row[5] = work.getOrder().getMessage();
//              
//            model.addRow(row);
//                }
//           }
//        }
//    }
//     }
     
    
    
    
    private void requestTestJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestTestJButtonActionPerformed

 int selectedRow = bestBuyRequestAreaConfirmationTable.getSelectedRow();
        
        if (selectedRow < 0){
            return;
        }
        
        BestBuyOrderWorkRequest request = (BestBuyOrderWorkRequest)bestBuyRequestAreaConfirmationTable.getValueAt(selectedRow, 6);
        //System.out.println(request.getProductName());
        //request.setStatus("Processing");
        
        ProductConfirmationBestBuyJPanel pcbbjp = new ProductConfirmationBestBuyJPanel(userProcessContainer, request);
        userProcessContainer.add("productConfirmationBestBuyJPanel", pcbbjp);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);



//CardLayout layout = (CardLayout) userProcessContainer.getLayout();
//userProcessContainer.add("ProductConfirmationBestBuyJPanel", new ProductConfirmationBestBuyJPanel(userProcessContainer, account, enterprise,business));
     //  layout.next(userProcessContainer);
    }//GEN-LAST:event_requestTestJButtonActionPerformed

    private void amazonRequestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_amazonRequestButtonActionPerformed
        // TODO add your handling code here:
        
        int selectedRow = bestBuyRequestAreaConfirmationTable.getSelectedRow();
        //String category = bestBuyRequestAreaConfirmationTable.getValueAt(selectedRow, 0).toString();
        int pID = Integer.parseInt(bestBuyRequestAreaConfirmationTable.getValueAt(selectedRow, 0).toString());
        String pName = bestBuyRequestAreaConfirmationTable.getValueAt(selectedRow, 1).toString();
        int quantity = Integer.parseInt(bestBuyRequestAreaConfirmationTable.getValueAt(selectedRow, 2).toString());
        int totalCost = Integer.parseInt(bestBuyRequestAreaConfirmationTable.getValueAt(selectedRow, 3).toString());
        String address = bestBuyRequestAreaConfirmationTable.getValueAt(selectedRow, 4).toString();
        WorkRequest work = (WorkRequest) bestBuyRequestAreaConfirmationTable.getValueAt(selectedRow, 6);
        String message = "Order ready to ship";
         AmazonOrderWorkRequest
                 bbowr = new AmazonOrderWorkRequest();
         
            // aowr.setCategory(category);
             bbowr.setProductID(pID);
             bbowr.setProductName(pName);
             bbowr.setQuantity(quantity);
             bbowr.setPrice(totalCost);
             bbowr.setArea(address);
             bbowr.setMessage(message);
             bbowr.setOrder(work.getOrder());
            
             
               Organization org = null;
        
        
        for (Network ntw : business.getNetworkList()){
        for (Enterprise e : ntw.getEnterpriseDirectory().getEnterpriseList())
                {
                {
                    for(Organization o : e.getOrganizationDirectory().getOrganizationList())
                    { 
                        
                      if(o instanceof AmazonRequestHandlingOrganization){
                          
                          org = o;
                          break;
                    }
                    
                   
                        
                     
                    
                }
            }
        }
        if (org!=null){
            org.getWorkQueue().getWorkRequestList().add(bbowr);
            account.getWorkQueue().getWorkRequestList().add(bbowr);
        }
        }
        
         JOptionPane.showMessageDialog(null, "Request sent to Amazon");
        
    }//GEN-LAST:event_amazonRequestButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton amazonRequestButton;
    private javax.swing.JTable bestBuyRequestAreaConfirmationTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton requestTestJButton;
    // End of variables declaration//GEN-END:variables
}
