/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.UberRole;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Order.OrderItem;
//import Business.Organization.LyftOrganization;
import Business.Organization.Organization;
import Business.Organization.UberOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.AmazonOrderWorkRequest;
import Business.WorkQueue.BestBuyOrderWorkRequest;
import Business.WorkQueue.IkeaOrderWorkRequest;
import Business.WorkQueue.UberOrderWorkRequest;
import Business.WorkQueue.WorkRequest;
import java.awt.CardLayout;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author raunak
 */
public class UberWorkAreaJPanel extends javax.swing.JPanel {

    private JPanel userProcessContainer;
    private EcoSystem business;
    private UserAccount userAccount;
    private Organization organization;
    private UberOrganization uberDriverAllocationOrganization;
    
    /**
     * Creates new form LabAssistantWorkAreaJPanel
     */
    public UberWorkAreaJPanel(JPanel userProcessContainer, UserAccount account, UberOrganization uberDriverAllocationOrganization, Enterprise enterprise, EcoSystem business) {
        initComponents();
        
        this.userProcessContainer = userProcessContainer;
        this.userAccount = account;
        this.business = business;
        this.uberDriverAllocationOrganization = uberDriverAllocationOrganization;
        
        populateWorkQueueTable();
    }

   
    
   public void populateWorkQueueTable(){
         DefaultTableModel model = (DefaultTableModel) workRequestForUberJTable.getModel();
        
        model.setRowCount(0);
        
        
        
        for (WorkRequest work : uberDriverAllocationOrganization.getWorkQueue().getWorkRequestList()){
            if(work instanceof UberOrderWorkRequest){ 
           // for(Order o1 : work.getOrder()){
                    for(OrderItem oi : work.getOrder().getOrderItemList()){
                  
                 Object[] row = new Object[7];
                
                 row[0] = oi.getProductID();
                 row[1] = oi.getProductName();
                 row[2] = oi.getQuantity();
                 row[3] = oi.getPrice() * oi.getQuantity();
                
                 row[4] = work.getOrder().getArea();
                 
               row [5] = work.getOrder().getMessage();
               row [6] =work;
            model.addRow(row);
                
           }
        }
    }
     }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        workRequestForUberJTable = new javax.swing.JTable();
        processJButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();

        setBackground(new java.awt.Color(174, 221, 221));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        workRequestForUberJTable.setFont(new java.awt.Font("American Typewriter", 1, 13)); // NOI18N
        workRequestForUberJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product ID", "Product Name", "Quantity", "Price", "Address", "Message", "Order"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(workRequestForUberJTable);
        if (workRequestForUberJTable.getColumnModel().getColumnCount() > 0) {
            workRequestForUberJTable.getColumnModel().getColumn(0).setResizable(false);
            workRequestForUberJTable.getColumnModel().getColumn(1).setResizable(false);
            workRequestForUberJTable.getColumnModel().getColumn(2).setResizable(false);
            workRequestForUberJTable.getColumnModel().getColumn(3).setResizable(false);
            workRequestForUberJTable.getColumnModel().getColumn(4).setResizable(false);
            workRequestForUberJTable.getColumnModel().getColumn(5).setResizable(false);
            workRequestForUberJTable.getColumnModel().getColumn(6).setResizable(false);
        }

        add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 170, 870, 70));

        processJButton.setFont(new java.awt.Font("American Typewriter", 1, 13)); // NOI18N
        processJButton.setText("Process");
        processJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                processJButtonActionPerformed(evt);
            }
        });
        add(processJButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(420, 280, -1, -1));

        jLabel1.setFont(new java.awt.Font("American Typewriter", 1, 24)); // NOI18N
        jLabel1.setText("Uber Work Area");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 20, -1, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon("/Users/nidhisarode/Downloads/unnamed-3.png")); // NOI18N
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void processJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_processJButtonActionPerformed
        
        int selectedRow = workRequestForUberJTable.getSelectedRow();
        
        if (selectedRow < 0){
            return;
        }
        
        UberOrderWorkRequest request = (UberOrderWorkRequest)workRequestForUberJTable.getValueAt(selectedRow, 6);
     
        //request.setStatus("Processing");
        
        DeliveryWorkRequestJPanel processWorkRequestJPanel = new DeliveryWorkRequestJPanel(userProcessContainer, request);
        userProcessContainer.add("deliveryWorkRequestJPanel", processWorkRequestJPanel);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
        
    }//GEN-LAST:event_processJButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton processJButton;
    private javax.swing.JTable workRequestForUberJTable;
    // End of variables declaration//GEN-END:variables
}
