/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userinterface.AmazonManagement;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.Order.OrderItem;
import Business.Organization.AmazonRequestHandlingOrganization;
import Business.Organization.Organization;
import Business.Organization.UberOrganization;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.AmazonOrderWorkRequest;
import Business.WorkQueue.UberOrderWorkRequest;
import Business.WorkQueue.WorkRequest;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Rishi Nandedkar
 */
public class AmazonRequestHandlingAreaForUber extends javax.swing.JPanel {

    /**
     * Creates new form AmazonRequestHandlingAreaForUber
     */
    JPanel userProcessContainer;
    UserAccount account;
    AmazonRequestHandlingOrganization amazonRequestHandlingOrganization;
    EcoSystem business;
    public AmazonRequestHandlingAreaForUber(JPanel userProcessContainer, UserAccount account, AmazonRequestHandlingOrganization amazonRequestHandlingOrganization, EcoSystem business) {
        initComponents();
        this.userProcessContainer = userProcessContainer;
        this.account = account;
        this.amazonRequestHandlingOrganization = amazonRequestHandlingOrganization;
        this.business = business;
        populateLowerTable();
    }

   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        amazonReadyToShipToUberTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        requestUberBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(174, 221, 221));
        setLayout(null);

        amazonReadyToShipToUberTable.setFont(new java.awt.Font("American Typewriter", 1, 13)); // NOI18N
        amazonReadyToShipToUberTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Product ID", "Product Name", "Quantity", "Price", "Address", "Message", "Order"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(amazonReadyToShipToUberTable);

        add(jScrollPane2);
        jScrollPane2.setBounds(70, 260, 889, 97);

        jLabel1.setFont(new java.awt.Font("American Typewriter", 1, 24)); // NOI18N
        jLabel1.setText("Amazon's Uber Request Handling Work Area");
        add(jLabel1);
        jLabel1.setBounds(240, 110, 560, 47);

        requestUberBtn.setFont(new java.awt.Font("American Typewriter", 1, 13)); // NOI18N
        requestUberBtn.setText("Send Request to Uber");
        requestUberBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                requestUberBtnActionPerformed(evt);
            }
        });
        add(requestUberBtn);
        requestUberBtn.setBounds(410, 390, 250, 40);
    }// </editor-fold>//GEN-END:initComponents

    private void requestUberBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_requestUberBtnActionPerformed
        // TODO add your handling code here:
        
        int selectedRow = amazonReadyToShipToUberTable.getSelectedRow();
        //String category = bestBuyRequestAreaConfirmationTable.getValueAt(selectedRow, 0).toString();
        int pID = Integer.parseInt(amazonReadyToShipToUberTable.getValueAt(selectedRow, 0).toString());
        String pName = amazonReadyToShipToUberTable.getValueAt(selectedRow, 1).toString();
        int quantity = Integer.parseInt(amazonReadyToShipToUberTable.getValueAt(selectedRow, 2).toString());
        int totalCost = Integer.parseInt(amazonReadyToShipToUberTable.getValueAt(selectedRow, 3).toString());
        String address = amazonReadyToShipToUberTable.getValueAt(selectedRow, 4).toString();
        WorkRequest work = (WorkRequest) amazonReadyToShipToUberTable.getValueAt(selectedRow, 6);
        String message = "Order ready to ship";
         UberOrderWorkRequest
                 uowr = new UberOrderWorkRequest();
         
            // aowr.setCategory(category);
             uowr.setProductID(pID);
             uowr.setProductName(pName);
             uowr.setQuantity(quantity);
             uowr.setPrice(totalCost);
             uowr.setArea(address);
             uowr.setMessage(message);
             uowr.setOrder(work.getOrder());
            
             
               Organization org = null;
        
        
        for (Network ntw : business.getNetworkList()){
        for (Enterprise e : ntw.getEnterpriseDirectory().getEnterpriseList())
                {
                {
                    for(Organization o : e.getOrganizationDirectory().getOrganizationList())
                    { 
                        
                      if(o instanceof UberOrganization){
                          
                          org = o;
                          break;
                    }
                    
                   
                        
                     
                    
                }
            }
        }
        if (org!=null){
            org.getWorkQueue().getWorkRequestList().add(uowr);
            account.getWorkQueue().getWorkRequestList().add(uowr);
        }
        }
        
        
                                           JOptionPane.showMessageDialog(null, "Request successfully sent to Uber for delivery");

        
    }//GEN-LAST:event_requestUberBtnActionPerformed

    
     public void populateLowerTable(){
    
      DefaultTableModel model = (DefaultTableModel) amazonReadyToShipToUberTable.getModel();
        
        model.setRowCount(0);
        
        
        
        for (WorkRequest work : amazonRequestHandlingOrganization.getWorkQueue().getWorkRequestList()){
            if(work instanceof AmazonOrderWorkRequest){ 
           // for(Order o1 : work.getOrder()){
                    for(OrderItem oi : work.getOrder().getOrderItemList()){
                   
                 Object[] row = new Object[7];
                
                 row[0] = oi.getProductID();
                 row[1] = oi.getProductName();
                 row[2] = oi.getQuantity();
                 row[3] = oi.getPrice() * oi.getQuantity();
                
                 row[4] = work.getOrder().getArea();
                 
               row [5] = work.getOrder().getMessage();
               row [6] =work;
            model.addRow(row);
                
           }
        }
    }
    
    }

    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable amazonReadyToShipToUberTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton requestUberBtn;
    // End of variables declaration//GEN-END:variables
}
